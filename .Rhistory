full_join( d, . )  # full join back to original data to keep all rows intact for analysis
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4,
family = propodds( reverse = FALSE ), data = d.2 )
summary( mod3 )
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + gender2 +
age + RACE2 +HHSIZE2 + HHINCOME_cat + EDU,
family = propodds( reverse = FALSE ), data = d.2 )
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + HHIncome_cat + EDU,
family = propodds( reverse = FALSE ), data = d.2 )
summary( mod3 )
table( d.2$Cycle)
# compute quartiles only on cancer survivors
d.2 <- d %>%
filter( CA == 1 ) %>%   # filter cancer survivors
mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH
full_join( d, . )  # full join back to original data to keep all rows intact for analysis
# read in raw data file
d <- read.csv( "01-Data-Raw/ca_hei.csv")
# helper function
source( "R/utils.R")
# compute quartiles only on cancer survivors and generate normalized weights (note: first adjust weights based on number of cycles in the analysis)
d.2 <- d %>%
filter( CA == 1 ) %>%   # filter cancer survivors
mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH
full_join( d, . )  # full join back to original data to keep all rows intact for analysis
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + HHIncome_cat + EDU,
family = propodds( reverse = FALSE ), data = d.2,  )
summary( mod3 )
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + HHIncome_cat + EDU,
family = propodds( reverse = FALSE ), data = d.2, weights = norm.wt  )
summary( mod3 )
d$MartitalStat_cat
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
family = propodds( reverse = FALSE ), data = d.2, weights = norm.wt  )
summary( mod3 )
exp( 0.23341 )
library( MASS)
polr( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2, data = d.2, weights = norm.wt  )
mod.pol<-polr( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2, data = d.2, weights = norm.wt  )
summary(mod.pol)
summary( mod3 )
library(nnet)
multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2, weights = norm.wt)
mult.mod <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2, weights = norm.wt)
summary(mult.mod)
sum.mm <- summary(mult.mod)
sum.mm$coefficients
exp( sum.mm$coefficients )
anova( mod3, mult.mod )
# save table in CSV format
dir.create( "02-Tables-Figures")
write.csv( odds, "02-Tables-Figures/01-modelor.csv")
# exponentiate coefficients to OR's
odds <- exp( sum.mm$coefficients )
# save table in CSV format
write.csv( odds, "02-Tables-Figures/01-modelor.csv")
# confidence intervals
se <- sum.mm$standard.errors
se
confint( mult.mod)
View(ci)
# confidence intervals
ci <- confint( mult.mod)
View(ci)
class( ci)
# confidence intervals
ci <- list( confint( mult.mod) )
ci
class(ci)
ci[[1]]
lapply(seq(dim(ci)[3]), function(x) MyArray[ , , x])
lapply(seq(dim(ci)[3]), function(x) ci[ , , x])
vi <- round( ci, 2 )
# average predicted probabilities
predict( mult.mod )
# average predicted probabilities
predict( mult.mod, type = "probs" )
mult.mod$fitted.values
mult.mod$n
# average predicted probabilities
pp <- predict( mult.mod, type = "probs" ) %>%
mutate( id = rownames( . ) )
predict( mult.mod, type = "probs" )
class( predict( mult.mod, type = "probs" ) )
View(predict( mult.mod, type = "probs" ) )
# average predicted probabilities
pp <- predict( mult.mod, type = "probs" ) %>%
data.frame() %>%
mutate( id = rownames( . ) )
pp
View(pp)
# average predicted probabilities
pp <- predict( mult.mod, type = "probs" ) %>%
data.frame() %>%
mutate( id = rownames( . ) ) %>%
left_join( ., d.2 %>%
mutate( id = rownames( . ) ) %>%
select( id, fafh.q4 ) )
# average predicted probabilities
pp <- predict( mult.mod, type = "probs" ) %>%
data.frame() %>%
mutate( id = rownames( . ) ) %>%
left_join( ., d.2 %>%
mutate( id = rownames( . ) ) %>%
dplyr::select( id, fafh.q4 ) )
View(pp)
by( pp[1:4], pp$fafh.q4, colMeans)
data.frame( by( pp[1:4], pp$fafh.q4, colMeans) )
as.data.frame( by( pp[1:4], pp$fafh.q4, colMeans) )
class(by( pp[1:4], pp$fafh.q4, colMeans))
data.frame(do.call("rbind", by( pp[1:4], pp$fafh.q4, colMeans) ) )
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) %>% # compute mean predicted probabilities across classes of FAFH
data.frame(do.call("rbind", . ) ) # convert to data frame
data.frame(do.call("rbind", pp.by )
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) %>% # compute mean predicted probabilities across classes of FAFH
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) %>% # compute mean predicted probabilities across classes of FAFH
data.frame(do.call("rbind", pp.by ) )
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) %>% # compute mean predicted probabilities across classes of FAFH
data.frame(do.call("rbind", pp.by ) )
# save table in CSV format
write.csv( odds, "02-Tables-Figures/01-modelor.csv")
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) %>% # compute mean predicted probabilities across classes of FAFH
data.frame(do.call("rbind", pp.by ) )
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) # compute mean predicted probabilities across classes of FAFH
data.frame(do.call("rbind", pp.by ) )
pp.tab <- data.frame(do.call("rbind", pp.by ) )
pp.by
colnames( pp.tab ) <- paste0( "HEI.Q", 1:4 )
pp.tab
mutate( FAFH = paste0( "FAFH", 1:4)
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) )
colnames( pp.tab ) <- paste0( "HEI.Q", 1:4 )
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )
colnames( pp.tab )
pp.tab
d.2$foodsec_bin
table(d.2$foodsec_bin)
ci[,,2]
ci
ci[,,4]
dim(ci)
str(ci)
install.packages("R.utils")
library(r.utils)
library(R.utils)
extract.arrat(ci)
extract.array(ci)
class( ci)
# confidence intervals
ci <- confint( mult.mod)
extract.array(ci)
# confidence intervals
ci <- confint( mult.mod)
class(ci)
ci[,,2]
dim(ci)
ci
length(array)
extract.array(ci)
extract.array(ci, indices = list( 1:3))
out.ci <- extract.array(ci, indices = list( 1:3))
class(out.ci)
dim.ci <- dim( ci )
dim.ci
dim.ci <- dim( ci )[3]
dim.ci
# confidence intervals
ci <- confint( mult.mod) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
ci.df <- data.frame()
for( i in 1:dim.ci ){
extr.ci <- ci[,,i]
ci.df <- rbind( ci.df )
}
ci.df
i = 1
extr.ci <- ci[,,i]
extr.ci
ci.df <- data.frame()
ci.df <- rbind( ci.df )
ci.df
ci.df <- rbind( ci.df, extr.ci )
ci.df
bind_rows <- rbind( ci.df, extr.ci," " )
bind_rows
ci.df <- bind_rows( ci.df, extr.ci )
extr.ci <- ci[,,i]
ci.df <- bind_rows( ci.df, extr.ci )
ci.df <- rbind( ci.df, extr.ci )
ci.df <- rbind( ci.df, "")
ci.df
View(ci.df)
ci.df <- rbind( ci.df, data.frame( rep( "", dim.ci[1] )
}
ci.df <- data.frame()
extr.ci <- ci[,,i]
ci.df <- rbind( ci.df, extr.ci )
ci.df <- rbind( ci.df, data.frame( rep( "", dim.ci[1] ) ) )
ci.df <- cbind( ci.df, extr.ci )
ci.df <- data.frame()
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- data.frame( coln = 1: dim.ci[1])
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df
ci.df <- data.frame( coln = 1: dim.ci[2])
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df
dim( ci )
dim.ci[1]
dim.ci[2]
dim.ci[3]
dim( ci )[3]
dim( ci )[1]
ci.df <- data.frame( coln = 1: len.ci )
len.ci <- dim( ci )[1] # dimensions in `ci` array
ci.df <- data.frame( coln = 1: len.ci )
ci.df <- data.frame( coln = 1: len.ci )
ci.df
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", lenci[1] ) ) )
ci.df
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
ci.df
# confidence intervals
ci <- confint( mult.mod) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci )
for( i in 1:dim.ci ){
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
}
ci.df
View( cidf)
View(ci.df)
# confidence intervals
ci <- confint( mult.mod) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci )
for( i in 1:dim.ci ){
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
colnames( ci.df[, ncol( ci.df ) ] ) <- paste0( "blank.", i )
}
colnames( ci.df[, ncol( ci.df ) ] )
ci.df
ncol( ci.df )
ci.df
ci.df <- data.frame( coln = 1: len.ci )
extr.ci <- ci[,,i]
i = 1
ci.df <- data.frame( coln = 1: len.ci )
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
ci.df
ci.df[, ncol( ci.df ) ]
colnames( ci.df[, ncol( ci.df ) ] )
names( ci.df[, ncol( ci.df ) ] )
# confidence intervals
ci <- confint( mult.mod) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci )
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i )
colnames( ci.df )
# confidence intervals
ci <- confint( mult.mod) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci )
for( i in 1:dim.ci ){
extr.ci <- ci[,,i]
ci.df <- cbind( ci.df, extr.ci )
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) )
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i )
}
View(ci.df)
res.fun <- function( model.object ){
# save model summary
sum.mm <- summary(model.object)
# exponentiate coefficients to get OR's
odds <- exp( sum.mm$coefficients )
# confidence intervals
ci <- confint( model.object) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci ) # initialize data.frame for results storage
# loop for table of confidence intervals
for( i in 1:dim.ci ){
extr.ci <- ci[,,i] # extract ith dimension from the array
ci.df <- cbind( ci.df, extr.ci ) # append data frame ith dimension to existing df
ci.dfate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )
return( list( coefs = odds, conf.int = ci.df, pred.probs = pp.tab ) )
} <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) ) # add a blank space in between ci df's
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i ) # rename blank columns
}
res.fun(mult.mod)
model.object = mult.mod
res.fun <- function( model.object ){
# save model summary
sum.mm <- summary(model.object)
# exponentiate coefficients to get OR's
odds <- exp( sum.mm$coefficients )
# confidence intervals
ci <- confint( model.object) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci ) # initialize data.frame for results storage
# loop for table of confidence intervals
for( i in 1:dim.ci ){
extr.ci <- ci[,,i] # extract ith dimension from the array
ci.df <- cbind( ci.df, extr.ci ) # append data frame ith dimension to existing df
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) ) # add a blank space in between ci df's
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i ) # rename blank columns
}
# mean predicted probabilities across levels of FAFH
pp <- predict( model.object, type = "probs" ) %>% # fitted values (probability)
data.frame() %>% # convert to df
mutate( id = rownames( . ) ) %>% # create id variable using rownames for subsequent join
left_join( ., d.2 %>%
mutate( id = rownames( . ) ) %>%
dplyr::select( id, fafh.q4 ) )  # left_join FAFH variable from original data
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) # compute mean predicted probabilities across classes of FAFH
# generate final table for save and export
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )
return( list( coefs = odds, conf.int = ci.df, pred.probs = pp.tab ) )
}
res.fun(mult.mod)
res_fun <- function( model.object ){
# save model summary
sum.mm <- summary(model.object)
# exponentiate coefficients to get OR's
odds <- exp( sum.mm$coefficients )
# confidence intervals
ci <- confint( model.object) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci ) # initialize data.frame for results storage
# loop for table of confidence intervals
for( i in 1:dim.ci ){
extr.ci <- ci[,,i] # extract ith dimension from the array
ci.df <- cbind( ci.df, extr.ci ) # append data frame ith dimension to existing df
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) ) # add a blank space in between ci df's
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i ) # rename blank columns
}
# mean predicted probabilities across levels of FAFH
pp <- predict( model.object, type = "probs" ) %>% # fitted values (probability)
data.frame() %>% # convert to df
mutate( id = rownames( . ) ) %>% # create id variable using rownames for subsequent join
left_join( ., d.2 %>%
mutate( id = rownames( . ) ) %>%
dplyr::select( id, fafh.q4 ) )  # left_join FAFH variable from original data
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) # compute mean predicted probabilities across classes of FAFH
# generate final table for save and export
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )
return( list( coefs = odds, conf.int = ci.df, pred.probs = pp.tab ) )
}
# entire sample #
ent.samp <- res_fun( mult.mod )
# save tables in CSV format
write.csv( ent.samp$coefs, "02-Tables-Figures/01-modelor.csv")
write.csv( ent.samp$conf.int, "02-Tables-Figures/01-modelci.csv")
write.csv( ent.samp$pred.probs, "02-Tables-Figures/01-modelpp.csv")
# datasets for stratified analyses #
d.2.fi <- d %>%
filter( CA == 1 & foodsec_bin == 1 ) %>%   # filter cancer survivors
mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH and normalized weights
full_join( d, . )  # full join back to original data to keep all rows intact for analysis
mult.mod.fi <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2.fi, weights = norm.wt )
# datasets for stratified analyses #
d.2.fs <- d %>% # food secure
filter( CA == 1 & foodsec_bin == 1 ) %>%   # filter cancer survivors and food secure
mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH and normalized weights
full_join( d, . )  # full join back to original data to keep all rows intact for analysis
# fit on entire sample
mult.mod <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2, weights = norm.wt )
# fit on food insecure subset
mult.mod.fi <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2.fi, weights = norm.wt )
# fit on food secure subset
mult.mod.fs <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
FoodAsstP2 + SmokStat + ALCUSE2,
data = d.2.fs, weights = norm.wt )
## run function on food insecure subset ##
fi.samp <- res_fun( mult.mod )
# save tables in CSV format for fiire sample
write.csv( fi.samp$coefs, "02-Tables-Figures/02-modelorfi.csv")
write.csv( fi.samp$conf.int, "02-Tables-Figures/02-modelcifi.csv")
write.csv( fi.samp$pred.probs, "02-Tables-Figures/02-modelppfi.csv")
## run function on food secure subset ##
fs.samp <- res_fun( mult.mod )
# save tables in CSV format for fs sample
write.csv( fs.samp$coefs, "02-Tables-Figures/02-modelorfs.csv")
write.csv( fs.samp$conf.int, "02-Tables-Figures/02-modelcifs.csv")
write.csv( fs.samp$pred.probs, "02-Tables-Figures/02-modelppfs.csv")
# save tables in CSV format for fs sample
write.csv( fs.samp$coefs, "02-Tables-Figures/03-modelorfs.csv")
write.csv( fs.samp$conf.int, "02-Tables-Figures/03-modelcifs.csv")
write.csv( fs.samp$pred.probs, "02-Tables-Figures/03-modelppfs.csv")
model.object = mult.mod
# confidence intervals
ci <- exp( confint( model.object) )# generates an object of class `array`
ci
res_fun <- function( model.object ){
# save model summary
sum.mm <- summary(model.object)
# exponentiate coefficients to get OR's
odds <- exp( sum.mm$coefficients )
# confidence intervals
ci <- exp( confint( model.object) ) # generates an object of class `array` with tables for CI's that are exponentiated so we get confidence bounds for ORs
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci ) # initialize data.frame for results storage
# loop for table of confidence intervals
for( i in 1:dim.ci ){
extr.ci <- ci[,,i] # extract ith dimension from the array
ci.df <- cbind( ci.df, extr.ci ) # append data frame ith dimension to existing df
ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) ) # add a blank space in between ci df's
colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i ) # rename blank columns
}
# mean predicted probabilities across levels of FAFH
pp <- predict( model.object, type = "probs" ) %>% # fitted values (probability)
data.frame() %>% # convert to df
mutate( id = rownames( . ) ) %>% # create id variable using rownames for subsequent join
left_join( ., d.2 %>%
mutate( id = rownames( . ) ) %>%
dplyr::select( id, fafh.q4 ) )  # left_join FAFH variable from original data
pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) # compute mean predicted probabilities across classes of FAFH
# generate final table for save and export
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
relocate( FAFH, .before = X1 )
colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )
return( list( coefs = odds, conf.int = ci.df, pred.probs = pp.tab ) )
}
## run function on entire sample ##
ent.samp <- res_fun( mult.mod )
# save tables in CSV format for entire sample
write.csv( ent.samp$coefs, "02-Tables-Figures/01-modelor.csv")
write.csv( ent.samp$conf.int, "02-Tables-Figures/01-modelci.csv")
write.csv( ent.samp$pred.probs, "02-Tables-Figures/01-modelpp.csv")
## run function on food insecure subset ##
fi.samp <- res_fun( mult.mod )
# save tables in CSV format for fi sample
write.csv( fi.samp$coefs, "02-Tables-Figures/02-modelorfi.csv")
write.csv( fi.samp$conf.int, "02-Tables-Figures/02-modelcifi.csv")
write.csv( fi.samp$pred.probs, "02-Tables-Figures/02-modelppfi.csv")
## run function on food secure subset ##
fs.samp <- res_fun( mult.mod )
# save tables in CSV format for fs sample
write.csv( fs.samp$coefs, "02-Tables-Figures/03-modelorfs.csv")
write.csv( fs.samp$conf.int, "02-Tables-Figures/03-modelcifs.csv")
write.csv( fs.samp$pred.probs, "02-Tables-Figures/03-modelppfs.csv")

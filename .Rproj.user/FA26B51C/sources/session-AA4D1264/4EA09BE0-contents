library( tidyverse )
library( VGAM )  # proportional odds models
library( nnet )  # for multinomial logit models

# read in raw data file
d <- read.csv( "01-Data-Raw/ca_hei.csv")

# read in helper function
source( "R/utils.R")

# compute quartiles only on cancer survivors and generate normalized weights (note: first adjust weights based on number of cycles in the analysis)
d.2 <- d %>%
  filter( CA == 1 ) %>%   # filter cancer survivors
  mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
          fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
          norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH and normalized weights
  full_join( d, . )  # full join back to original data to keep all rows intact for analysis

# datasets for stratified analyses #
d.2.fi <- d %>% # food insecure
  filter( CA == 1 & foodsec_bin == 1 ) %>%   # filter cancer survivors and food insecure
  mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
          fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
          norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH and normalized weights
  full_join( d, . )  # full join back to original data to keep all rows intact for analysis

# datasets for stratified analyses #
d.2.fs <- d %>% # food secure
  filter( CA == 1 & foodsec_bin == 1 ) %>%   # filter cancer survivors and food secure
  mutate( hei.q4 = as.factor( quant_cut( "HEI2015_TOTAL_SCORE", 4, . ) ),
          fafh.q4 = as.factor( quant_cut( "FAFH", 4, . ) ),
          norm.wt = ( WTINT2YR /5 ) / mean( d$WTINT2YR, na.rm = T ) ) %>% # rank variables for HEI and FAFH and normalized weights
  full_join( d, . )  # full join back to original data to keep all rows intact for analysis

# proportional odds model (not used)
mod3 <- vglm( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
                Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
                FoodAsstP2 + SmokStat + ALCUSE2,
              family = propodds( reverse = FALSE ), data = d.2, weights = norm.wt  )

summary( mod3 )


## multinomial logistic regression model ##


# fit on entire sample
mult.mod <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
            Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
            FoodAsstP2 + SmokStat + ALCUSE2,
            data = d.2, weights = norm.wt )

# fit on food insecure subset
mult.mod.fi <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
                        Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
                        FoodAsstP2 + SmokStat + ALCUSE2,
                      data = d.2.fi, weights = norm.wt )

# fit on food secure subset
mult.mod.fs <- multinom( factor( hei.q4, ordered = T ) ~ fafh.q4 + Gender2 +
                           Age + Race2 +HHSize2 + IncPovRat2 + EDU + MartitalStat_cat +
                           FoodAsstP2 + SmokStat + ALCUSE2,
                         data = d.2.fs, weights = norm.wt )



# create function to generate results #

res_fun <- function( model.object ){
  
# save model summary
sum.mm <- summary(model.object)

# exponentiate coefficients to get OR's
odds <- exp( sum.mm$coefficients )

# confidence intervals
ci <- confint( model.object) # generates an object of class `array`
dim.ci <- dim( ci )[3] # dimensions in `ci` array
len.ci <- dim( ci )[1] # length in `ci` array
ci.df <- data.frame( coln = 1: len.ci ) # initialize data.frame for results storage

# loop for table of confidence intervals
for( i in 1:dim.ci ){
  
  extr.ci <- ci[,,i] # extract ith dimension from the array
  ci.df <- cbind( ci.df, extr.ci ) # append data frame ith dimension to existing df
  ci.df <- cbind( ci.df, data.frame( rep( "", len.ci[1] ) ) ) # add a blank space in between ci df's
  colnames( ci.df )[ ncol( ci.df ) ] <- paste0( "blank.", i ) # rename blank columns
}


# mean predicted probabilities across levels of FAFH
pp <- predict( model.object, type = "probs" ) %>% # fitted values (probability)
  data.frame() %>% # convert to df
  mutate( id = rownames( . ) ) %>% # create id variable using rownames for subsequent join
  left_join( ., d.2 %>%
               mutate( id = rownames( . ) ) %>%
               dplyr::select( id, fafh.q4 ) )  # left_join FAFH variable from original data

pp.by <- by( pp[1:4], pp$fafh.q4, colMeans) # compute mean predicted probabilities across classes of FAFH

# generate final table for save and export
pp.tab <- data.frame(do.call("rbind", pp.by ) ) %>%
  mutate( FAFH = paste0( "FAFH", 1:4) ) %>%
  relocate( FAFH, .before = X1 )

colnames( pp.tab ) <- c( "FAFH", paste0( "HEI.Q", 1:4 ) )

return( list( coefs = odds, conf.int = ci.df, pred.probs = pp.tab ) )
}


## run function on entire sample ##
ent.samp <- res_fun( mult.mod )

# save tables in CSV format for entire sample
write.csv( ent.samp$coefs, "02-Tables-Figures/01-modelor.csv")
write.csv( ent.samp$conf.int, "02-Tables-Figures/01-modelci.csv")
write.csv( ent.samp$pred.probs, "02-Tables-Figures/01-modelpp.csv")


## run function on food insecure subset ##
fi.samp <- res_fun( mult.mod )

# save tables in CSV format for fi sample
write.csv( fi.samp$coefs, "02-Tables-Figures/02-modelorfi.csv")
write.csv( fi.samp$conf.int, "02-Tables-Figures/02-modelcifi.csv")
write.csv( fi.samp$pred.probs, "02-Tables-Figures/02-modelppfi.csv")


## run function on food secure subset ##
fs.samp <- res_fun( mult.mod )

# save tables in CSV format for fs sample
write.csv( fs.samp$coefs, "02-Tables-Figures/03-modelorfs.csv")
write.csv( fs.samp$conf.int, "02-Tables-Figures/03-modelcifs.csv")
write.csv( fs.samp$pred.probs, "02-Tables-Figures/03-modelppfs.csv")


